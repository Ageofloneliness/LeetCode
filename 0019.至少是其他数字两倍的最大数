0019.至少是其他数字两倍的最大数

在一个给定的数组nums中，总是存在一个最大元素 。

查找数组中的最大元素是否至少是数组中每个其他数字的两倍。

如果是，则返回最大元素的索引，否则返回-1。

示例 1:

输入: nums = [3, 6, 1, 0]
输出: 1
解释: 6是最大的整数, 对于数组中的其他整数,
6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.
 

示例 2:

输入: nums = [1, 2, 3, 4]
输出: -1
解释: 4没有超过3的两倍大, 所以我们返回 -1.
 

提示:

nums 的长度范围在[1, 50].
每个 nums[i] 的整数范围在 [0, 99]

方法一：先找到最大值，再和所有值比较
```
/**
 * 0019.至少是其他数字两倍的最大数
 * @param {number[]} nums
 * @return {number}
 */
const dominantIndex = function(nums) {
	let maxIndex = 0;
	// 找到最大值
	for (let i = 0; i < nums.length; i++) {
		if (nums[i] > nums[maxIndex]) {
			maxIndex = i;
		}
	}
	// 最大值与所有值比较
	for (let i = 0; i < nums.length; i++) {
		// 注意过滤最大值
		if (i === maxIndex)
			continue;
		if (nums[i] * 2 <= nums[maxIndex]) 
			continue;
		else
			return -1;
	}
	return maxIndex;
};
```

方法二：只找最大值和次最大值
```
/**
 * 0019.至少是其他数字两倍的最大数
 * @param {number[]} nums
 * @return {number}
 */
const dominantIndex = function(nums) {
	// 记录最大值和次最大值索引
	let maxIndex = 0, lessIndex = 0;
	for (let i = 0; i < nums.length; i++) {
		if (nums[i] > nums[maxIndex]) {
			lessIndex = maxIndex;
			maxIndex = i;
		}else if (nums[i] > nums[lessIndex]) {
			lessIndex = i;
		}
	}
	return nums[maxIndex] >= nums[lessIndex] * 2 ? maxIndex : -1;
};
```

方法三：深拷贝一份数组，排序，找到最大值和次最大值再比较，满足条件后，再去原数组indexOf()索引
