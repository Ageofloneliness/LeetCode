0283.移动零
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:
  输入: [0,1,0,3,12]
  输出: [1,3,12,0,0]
  
  输入: [0,1,0]
  输出: [1,0,0]
 
说明:
  必须在原数组上操作，不能拷贝额外的数组。
  尽量减少操作次数。
  
方法一：遇0删除，末尾补0
```js
/**
 * 283.移动零
 * 遇0删除，末尾补0
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
const moveZeroes = function(nums) {
	let [index, length] = [0, nums.length];
	while(index < length) {
		if (nums[index] === 0) {
			// push 和 splice 先后顺序无所谓
			nums.push(0);
			nums.splice(index, 1);
			// length - 1, nums.length 不会变
			// 循环跳出条件,否则一直执行已经移动过的0(死循环)
			length--;
		}
		else
			index++;
	}
};
```

方法二:
```
/**
 * 283.移动零
 * 题目的关键是原地替换，而不消耗额外的空间，即空间复杂度要在O（1）。
 * 因此我们采用经典的双指针来解决，现实遍历数组将非0的元素依次存数组中。
 * 循环结束后看两个指针差多少，即补足0即可
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
const moveZeroes = function(nums) {
  const max = nums.length
  let index = 0
  for (let i = 0; i < max; i++) {
    if (nums[i] !== 0) {
      // 将后面的非0元素赋值给前面的0，index为边界，前面的元素为非0元素，后面的元素为0
      nums[index] = nums[i];
      index++;
    }
  }
  for (;index < max; index++) {
    nums[index] = 0
  }
};
```
