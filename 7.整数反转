https://leetcode-cn.com/problems/reverse-integer/solution/javascript-zheng-shu-fan-zhuan-942-by-rhinoc/

https://leetcode-cn.com/problems/reverse-integer/solution/jszheng-shu-fan-zhuan-by-cuidingfeng/

https://leetcode-cn.com/problems/reverse-integer/solution/hua-jie-suan-fa-7-zheng-shu-fan-zhuan-by-deppwang-/


7.整数反转
给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转
- 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0

示例 1:

输入: 123
输出: 321
 示例 2:

输入: -123
输出: -321
示例 3:

输入: 120
输出: 21

方法一：
将数字转为数组再反转
/** 7.整数反转
 * @param {number} x
 * @return {number}
 */
const reverse = function (x) {
	const isNegative = x < 0; 
	let reverseX = parseInt(x.toString().split("").reverse().join(""), 10);
	if(isNegative) 
		reverseX = -reverseX;
	if(reverseX > Math.pow(2,31) - 1 || reverseX < Math.pow(-2,31)) return 0
		return reverseX;
};

方法二：
使用数学的方式
123 => 321
3*100 + 2*10 + 1 => ((0+3)*10 + 2) * 10 + 1
```
/** 7.整数反转
 * @param {number} x
 * @return {number}
 */
const reverse = function (x) {
	const [MIN, MAX] = [-Math.pow(2, 31), Math.pow(2, 31) - 1];
	let [rem, res] = [0, 0];
	while (x !== 0) {
		rem = x % 10;
		if (res > MAX / 10 || res < MIN / 10)
			return 0;
		res = res * 10 + rem;
		x = (x / 10) >> 0;
	}
	return res;
};
```
