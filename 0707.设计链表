


```
function MyLinkedList() {
  // 节点
  function Node(val) {
    this.val = val; // 当前节点的元素
    this.next = null; // 下一个节点指针
  }
  let length = 0; // 链表的长度
  let head = null; // 链表的头部节点

  // 得到指定index的值
  this.get = function (position) {
    if (position < 0 || position >= length) {
      // 越界
      return -1;
    }
    else {
      let index = 0;
      let current = head;
      // 从头开始，循环找到位置要插入位置的节点current
      while (index++ < position) {
        previous = current;
        current = current.next;
      }
      return current.val;
    }
  };

  this.addAtHead = function (val) {
    let node = new Node(val);
    // 判断是否为空链表
    if (head === null) {
      head = node;
    }
    else {
      head = { val, next: head };
    }
    length++;
  };

  // 向链表尾部添加一个新的节点
  this.addAtTail = function (val) {
    let node = new Node(val);
    // 判断是否为空链表
    if (head === null) {
      // 是空链表，就把当前节点作为头部节点
      head = node;
    }
    else {
      let current = head;
      // 从 head 开始一直找到最后一个 node
      while (current.next) {
        // 后面还有 node
        current = current.next;
      }
      // 把最后一个节点的 next 指针 指向 新加的节点
      current.next = node;
    }
    // 链表的长度加 1
    length++;
  };

  // 向链表特定位置插入一个新节点
  this.addAtIndex = function (position, val) {
    if (position <= 0) {
      this.addAtHead(val);
    }
    else if (position === length) {
      this.addAtTail(val);
    }
    else if(position > 0 && position < length) {
      // 要插入的节点
      let node = new Node(val);
      let index = 0;
      let current = head;
      let previous;
      // 从头开始，循环找到位置要插入位置的节点current
      while (index++ < position) {
        previous = current;
        current = current.next;
      }
      // 把前一个节点的指针指向新节点，新节点的指针指向当前节点，保持连接性
      node.next = current;
      previous.next = node;
      length++;
    }
  };

  // 从链表的特定位置移除一项
  this.deleteAtIndex = function (position) {
    // 检查越界
    if (position > -1 && position < length) {
      if (position === 0) {
        head = head.next;
      }
      else {
        let current = head;
        let index = 0;
        let previous;
        // 从头开始，循环找到位置
        while (index++ < position) {
          previous = current;
          current = current.next;
        }
        // 把当前节点的 next 指针 指向 当前节点的 next 指针，即是 删除了当前节点
        previous.next = current.next;
      }
      length--;
    }
  };
}

const myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(0);
myLinkedList.addAtIndex(1, 9);
myLinkedList.addAtIndex(1, 5);
myLinkedList.addAtTail(7);
myLinkedList.addAtHead(1);
myLinkedList.addAtIndex(5, 8);
myLinkedList.addAtIndex(5,2);
myLinkedList.addAtIndex(3,0);
myLinkedList.addAtTail(1);
myLinkedList.addAtTail(0);
myLinkedList.deleteAtIndex(6);


```


```
/**
 * Initialize your data structure here.
 */
const MyLinkedList = function() {
  this.head = null;
  this.tail = null;
  this.len = 0;
};

/**
 * Get the value of the index-th node in the linked list. If the index is invalid, return -1.
 * @param {number} index
 * @return {number}
 */
MyLinkedList.prototype.get = function(index) {
  if (index < 0 || index >= this.len) {
    return -1;
  }
  let current = this.head;
  let pos = 0;
  while (current.next && pos < index) {
    current = current.next;
    pos ++;
  }
  return current.val;
};

/**
 * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
 * @param {number} val
 * @return {void}
 */
MyLinkedList.prototype.addAtHead = function(val) {
  // 新节点
  const node = {
    val,
    next: this.head,
  };
  // 新节点赋值为头节点
  this.head = node;
  // 如果是没有尾节点(空链表),头节点和尾节点相同(只执行一次)
  if (!this.tail) {
    this.tail = node;
  }
  this.len ++;
};

/**
 * Append a node of value val to the last element of the linked list.
 * @param {number} val
 * @return {void}
 */
MyLinkedList.prototype.addAtTail = function(val) {
  // 新节点
  const node = { val, next: null };
  // 新节点赋值为尾节点
  this.tail.next = node;
  // 保存新的尾节点
  this.tail = node;
   // 如果是没有头节点(空链表),头节点和尾节点相同(只执行一次)
  if (!this.head) {
    this.head = node;
  }
  this.len ++;
};

/**
 * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
 * @param {number} index
 * @param {number} val
 * @return {void}
 */
MyLinkedList.prototype.addAtIndex = function(index, val) {
  if (index > this.len) { return; }
  if (index <= 0) { return this.addAtHead(val); }
  if (index === this.len) { return this.addAtTail(val) }

  let current = this.head;
  let pos = 0;
  while (current.next && pos < index - 1) {
    current = current.next;
    pos ++;
  }
  const nextnext = current.next;
  current.next = { val, next: nextnext }
  this.len++;
};

/**
 * Delete the index-th node in the linked list, if the index is valid.
 * @param {number} index
 * @return {void}
 */
MyLinkedList.prototype.deleteAtIndex = function(index) {
  if (index < 0 || index > this.len - 1) { return }
  let current = this.head;
  let pos = 0;
  this.len --;
  if (index === 0) {
    this.head = this.head.next;
    if (!this.head) {
      this.tail = null;
    }
    return;
  }
  while (current.next && pos < index - 1) {
    current = current.next;
    pos ++;
  }
  current.next = current.next.next;
  if (!current.next) {
    this.tail = current;
  }
};

MyLinkedList.prototype.display = function() {
  let current = this.head;
  const arr = [];
  if (this.head) {
    while (current && current.next) {
      arr.push(current.val);
      current = current.next;
    }
    arr.push(current.val);
  }
  console.info(arr);
}

const myLinkedList = new MyLinkedList();

myLinkedList.addAtHead(0);
// myLinkedList.addAtIndex(1, 9);
// myLinkedList.addAtIndex(1, 5);
// myLinkedList.addAtTail(7);
myLinkedList.addAtHead(1);
// myLinkedList.addAtIndex(5, 8);
// myLinkedList.addAtIndex(5,2);
// myLinkedList.addAtIndex(3,0);
// myLinkedList.addAtTail(1);
// myLinkedList.addAtTail(0);
// myLinkedList.deleteAtIndex(6);
```
